% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reval.R
\name{validate_dataset}
\alias{validate_dataset}
\title{Validate a dataset against a provided specification.}
\usage{
validate_dataset(
  filename,
  combined_specs = function() {     reval::min_data_set_spec },
  write_report_to = FALSE
)
}
\arguments{
\item{filename}{A string specifying the path of the file containing
the dataset to be validated.}

\item{combined_specs}{A data frame containing the specifications
against which to validate the dataset.  This should include the
columns: "dataset", "variable", "where_clause",
"where_clause_variable", "where_clause_value",
"value_level_codelist", "value_level_data_type",
"value_level_mandatory", "value_level_format", "codelist",
"codelist_terms", "format".}

\item{write_report_to}{(default FALSE). If a filename is passed in
a text or csv file is written containing the failed tests.}
}
\value{
None. The function will stop and throw an error if the dataset fails to validate against the specifications.
During the process, it prints out debug information about the validation process, which can be useful for
diagnosing the cause of a validation failure.
}
\description{
The \code{validate_dataset} function reads a dataset and validates its structure and content based on the rules
specified in the \code{combined_specs} data frame. It checks the dataset for compliance with the specification
information such as the variable type and if a variable is required to be mandatory, among other things.
}
\examples{
\dontrun{
  # Suppose we have a dataset in "data.csv" and specifications in the `specs` data frame
  validate_dataset("data.csv", specs)
}
}
